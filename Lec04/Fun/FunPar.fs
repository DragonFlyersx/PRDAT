// Implementation file for parser generated by fsyacc
module FunPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "FunPar.fsy"

 (* File Fun/FunPar.fsy 
    Parser for micro-ML, a small functional language; one-argument functions.
    sestoft@itu.dk * 2009-10-19
  *)

 open Absyn;

# 15 "FunPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | AND
  | OR
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | NOT
  | THEN
  | TRUE
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_Params1
    | NONTERM_Args1
    | NONTERM_AppExpr
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | AND  -> 3 
  | OR  -> 4 
  | EQ  -> 5 
  | NE  -> 6 
  | GT  -> 7 
  | LT  -> 8 
  | GE  -> 9 
  | LE  -> 10 
  | PLUS  -> 11 
  | MINUS  -> 12 
  | TIMES  -> 13 
  | DIV  -> 14 
  | MOD  -> 15 
  | ELSE  -> 16 
  | END  -> 17 
  | FALSE  -> 18 
  | IF  -> 19 
  | IN  -> 20 
  | LET  -> 21 
  | NOT  -> 22 
  | THEN  -> 23 
  | TRUE  -> 24 
  | CSTBOOL _ -> 25 
  | NAME _ -> 26 
  | CSTINT _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_EQ 
  | 6 -> TOKEN_NE 
  | 7 -> TOKEN_GT 
  | 8 -> TOKEN_LT 
  | 9 -> TOKEN_GE 
  | 10 -> TOKEN_LE 
  | 11 -> TOKEN_PLUS 
  | 12 -> TOKEN_MINUS 
  | 13 -> TOKEN_TIMES 
  | 14 -> TOKEN_DIV 
  | 15 -> TOKEN_MOD 
  | 16 -> TOKEN_ELSE 
  | 17 -> TOKEN_END 
  | 18 -> TOKEN_FALSE 
  | 19 -> TOKEN_IF 
  | 20 -> TOKEN_IN 
  | 21 -> TOKEN_LET 
  | 22 -> TOKEN_NOT 
  | 23 -> TOKEN_THEN 
  | 24 -> TOKEN_TRUE 
  | 25 -> TOKEN_CSTBOOL 
  | 26 -> TOKEN_NAME 
  | 27 -> TOKEN_CSTINT 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_AtExpr 
    | 20 -> NONTERM_AtExpr 
    | 21 -> NONTERM_AtExpr 
    | 22 -> NONTERM_AtExpr 
    | 23 -> NONTERM_AtExpr 
    | 24 -> NONTERM_Params1 
    | 25 -> NONTERM_Params1 
    | 26 -> NONTERM_Args1 
    | 27 -> NONTERM_Args1 
    | 28 -> NONTERM_AppExpr 
    | 29 -> NONTERM_AppExpr 
    | 30 -> NONTERM_Const 
    | 31 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | NOT  -> "NOT" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;24us;65535us;0us;2us;6us;7us;8us;9us;10us;11us;12us;13us;33us;14us;34us;15us;35us;16us;36us;17us;37us;18us;38us;19us;39us;20us;40us;21us;41us;22us;42us;23us;43us;24us;44us;25us;45us;26us;50us;27us;51us;28us;54us;29us;55us;30us;57us;31us;58us;32us;27us;65535us;0us;4us;4us;63us;6us;4us;8us;4us;10us;4us;12us;4us;33us;4us;34us;4us;35us;4us;36us;4us;37us;4us;38us;4us;39us;4us;40us;4us;41us;4us;42us;4us;43us;4us;44us;4us;45us;4us;50us;4us;51us;4us;54us;4us;55us;4us;57us;4us;58us;4us;60us;63us;63us;63us;2us;65535us;49us;53us;61us;62us;3us;65535us;4us;65us;60us;66us;63us;64us;24us;65535us;0us;5us;6us;5us;8us;5us;10us;5us;12us;5us;33us;5us;34us;5us;35us;5us;36us;5us;37us;5us;38us;5us;39us;5us;40us;5us;41us;5us;42us;5us;43us;5us;44us;5us;45us;5us;50us;5us;51us;5us;54us;5us;55us;5us;57us;5us;58us;5us;27us;65535us;0us;46us;4us;46us;6us;46us;8us;46us;10us;46us;12us;46us;33us;46us;34us;46us;35us;46us;36us;46us;37us;46us;38us;46us;39us;46us;40us;46us;41us;46us;42us;46us;43us;46us;44us;46us;45us;46us;50us;46us;51us;46us;54us;46us;55us;46us;57us;46us;58us;46us;60us;46us;63us;46us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;28us;56us;59us;63us;88us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;14us;1us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;1us;2us;2us;28us;1us;3us;1us;4us;14us;4us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;4us;14us;4us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;4us;14us;4us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;1us;5us;14us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;14us;6us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;14us;6us;7us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;14us;6us;7us;8us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;14us;6us;7us;8us;9us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;14us;6us;7us;8us;9us;10us;10us;11us;12us;13us;14us;15us;16us;17us;18us;14us;6us;7us;8us;9us;10us;11us;11us;12us;13us;14us;15us;16us;17us;18us;14us;6us;7us;8us;9us;10us;11us;12us;12us;13us;14us;15us;16us;17us;18us;14us;6us;7us;8us;9us;10us;11us;12us;13us;13us;14us;15us;16us;17us;18us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;14us;15us;16us;17us;18us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;15us;16us;17us;18us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;16us;17us;18us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;17us;18us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;18us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;21us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;21us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;22us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;22us;14us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;23us;15us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;23us;29us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;2us;21us;22us;2us;21us;22us;1us;21us;1us;21us;1us;21us;1us;22us;1us;22us;1us;22us;1us;22us;1us;23us;2us;23us;29us;1us;23us;2us;23us;29us;2us;24us;25us;1us;25us;2us;26us;27us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;19us;21us;24us;26us;28us;43us;45us;60us;62us;77us;79us;94us;109us;124us;139us;154us;169us;184us;199us;214us;229us;244us;259us;274us;289us;304us;319us;334us;349us;364us;380us;382us;384us;386us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;413us;416us;418us;420us;422us;424us;426us;428us;430us;432us;435us;437us;440us;443us;445us;448us;450us;452us;454us;456us;|]
let _fsyacc_action_rows = 69
let _fsyacc_actionTableElements = [|7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;0us;49152us;14us;32768us;0us;3us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;0us;16385us;5us;16386us;1us;57us;21us;48us;25us;68us;26us;47us;27us;67us;0us;16387us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;14us;32768us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;23us;8us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;14us;32768us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;16us;10us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;13us;16388us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;3us;16389us;13us;35us;14us;36us;15us;37us;3us;16390us;13us;35us;14us;36us;15us;37us;3us;16391us;13us;35us;14us;36us;15us;37us;0us;16392us;0us;16393us;0us;16394us;9us;16395us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;9us;16396us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;5us;16397us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;5us;16398us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;5us;16399us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;5us;16400us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;11us;16401us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;12us;16402us;3us;44us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;14us;32768us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;20us;51us;14us;32768us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;17us;52us;14us;32768us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;20us;55us;14us;32768us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;17us;56us;14us;32768us;2us;59us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;14us;32768us;2us;60us;3us;44us;4us;45us;5us;38us;6us;39us;7us;40us;8us;41us;9us;42us;10us;43us;11us;33us;12us;34us;13us;35us;14us;36us;15us;37us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;0us;16403us;0us;16404us;1us;32768us;26us;49us;2us;32768us;5us;50us;26us;61us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;0us;16405us;1us;32768us;5us;54us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;0us;16406us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;7us;32768us;1us;58us;12us;12us;19us;6us;21us;48us;25us;68us;26us;47us;27us;67us;0us;16407us;5us;16407us;1us;57us;21us;48us;25us;68us;26us;47us;27us;67us;1us;16408us;26us;61us;0us;16409us;5us;16410us;1us;57us;21us;48us;25us;68us;26us;47us;27us;67us;0us;16411us;0us;16412us;0us;16413us;0us;16414us;0us;16415us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;24us;25us;31us;32us;40us;55us;63us;78us;86us;100us;108us;112us;116us;120us;121us;122us;123us;133us;143us;149us;155us;161us;167us;179us;192us;207us;222us;237us;252us;267us;282us;290us;298us;306us;314us;322us;330us;338us;346us;354us;362us;370us;378us;386us;387us;388us;390us;393us;401us;409us;410us;412us;420us;428us;429us;437us;445us;446us;452us;454us;455us;461us;462us;463us;464us;465us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;1us;6us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;7us;8us;3us;1us;2us;1us;2us;2us;4us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;3us;3us;3us;4us;4us;5us;5us;6us;6us;7us;7us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16403us;16404us;65535us;65535us;65535us;65535us;16405us;65535us;65535us;65535us;16406us;65535us;65535us;16407us;65535us;65535us;16409us;65535us;16411us;16412us;16413us;16414us;16415us;|]
let _fsyacc_reductions = lazy [|
# 270 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startMain));
# 279 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "FunPar.fsy"
                                                               _1 
                   )
# 39 "FunPar.fsy"
                 : Absyn.expr));
# 290 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "FunPar.fsy"
                                                               _1                     
                   )
# 43 "FunPar.fsy"
                 : Absyn.expr));
# 301 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "FunPar.fsy"
                                                               _1                     
                   )
# 44 "FunPar.fsy"
                 : Absyn.expr));
# 312 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            let _4 = parseState.GetInput(4) :?> Absyn.expr in
            let _6 = parseState.GetInput(6) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "FunPar.fsy"
                                                               If(_2, _4, _6)         
                   )
# 45 "FunPar.fsy"
                 : Absyn.expr));
# 325 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "FunPar.fsy"
                                                               Prim("-", CstI 0, _2)  
                   )
# 46 "FunPar.fsy"
                 : Absyn.expr));
# 336 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "FunPar.fsy"
                                                               Prim("+",  _1, _3)     
                   )
# 47 "FunPar.fsy"
                 : Absyn.expr));
# 348 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "FunPar.fsy"
                                                               Prim("-",  _1, _3)     
                   )
# 48 "FunPar.fsy"
                 : Absyn.expr));
# 360 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "FunPar.fsy"
                                                               Prim("*",  _1, _3)     
                   )
# 49 "FunPar.fsy"
                 : Absyn.expr));
# 372 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "FunPar.fsy"
                                                               Prim("/",  _1, _3)     
                   )
# 50 "FunPar.fsy"
                 : Absyn.expr));
# 384 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "FunPar.fsy"
                                                               Prim("%",  _1, _3)     
                   )
# 51 "FunPar.fsy"
                 : Absyn.expr));
# 396 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "FunPar.fsy"
                                                               Prim("=",  _1, _3)     
                   )
# 52 "FunPar.fsy"
                 : Absyn.expr));
# 408 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "FunPar.fsy"
                                                               Prim("<>", _1, _3)     
                   )
# 53 "FunPar.fsy"
                 : Absyn.expr));
# 420 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "FunPar.fsy"
                                                               Prim(">",  _1, _3)     
                   )
# 54 "FunPar.fsy"
                 : Absyn.expr));
# 432 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "FunPar.fsy"
                                                               Prim("<",  _1, _3)     
                   )
# 55 "FunPar.fsy"
                 : Absyn.expr));
# 444 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "FunPar.fsy"
                                                               Prim(">=", _1, _3)     
                   )
# 56 "FunPar.fsy"
                 : Absyn.expr));
# 456 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "FunPar.fsy"
                                                               Prim("<=", _1, _3)     
                   )
# 57 "FunPar.fsy"
                 : Absyn.expr));
# 468 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "FunPar.fsy"
                                                               If(_1, _3, CstB false) 
                   )
# 58 "FunPar.fsy"
                 : Absyn.expr));
# 480 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _3 = parseState.GetInput(3) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FunPar.fsy"
                                                               If(_1, CstB true, _3)  
                   )
# 59 "FunPar.fsy"
                 : Absyn.expr));
# 492 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "FunPar.fsy"
                                                               _1                     
                   )
# 63 "FunPar.fsy"
                 : Absyn.expr));
# 503 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "FunPar.fsy"
                                                               Var _1                 
                   )
# 64 "FunPar.fsy"
                 : Absyn.expr));
# 514 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> Absyn.expr in
            let _6 = parseState.GetInput(6) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "FunPar.fsy"
                                                               Let(_2, _4, _6)        
                   )
# 65 "FunPar.fsy"
                 : Absyn.expr));
# 527 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string list in
            let _5 = parseState.GetInput(5) :?> Absyn.expr in
            let _7 = parseState.GetInput(7) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FunPar.fsy"
                                                                Letfun(_2, _3, _5, _7) 
                   )
# 66 "FunPar.fsy"
                 : Absyn.expr));
# 541 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "FunPar.fsy"
                                                               _2                     
                   )
# 67 "FunPar.fsy"
                 : Absyn.expr));
# 552 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "FunPar.fsy"
                                                               [_1]                   
                   )
# 72 "FunPar.fsy"
                 : string list));
# 563 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "FunPar.fsy"
                                                               _1 :: _2               
                   )
# 73 "FunPar.fsy"
                 : string list));
# 575 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FunPar.fsy"
                                                               [_1]                   
                   )
# 77 "FunPar.fsy"
                 : Absyn.expr list));
# 586 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _2 = parseState.GetInput(2) :?> Absyn.expr list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FunPar.fsy"
                                                               _1 :: _2               
                   )
# 78 "FunPar.fsy"
                 : Absyn.expr list));
# 598 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Absyn.expr in
            let _2 = parseState.GetInput(2) :?> Absyn.expr list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FunPar.fsy"
                                                               Call(_1, _2)           
                   )
# 81 "FunPar.fsy"
                 : Absyn.expr));
# 610 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Absyn.expr in
            let _4 = parseState.GetInput(4) :?> Absyn.expr list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FunPar.fsy"
                                                               Call(_2, _4)           
                   )
# 82 "FunPar.fsy"
                 : Absyn.expr));
# 622 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "FunPar.fsy"
                                                               CstI(_1)               
                   )
# 86 "FunPar.fsy"
                 : Absyn.expr));
# 633 "FunPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bool in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FunPar.fsy"
                                                               CstB(_1)               
                   )
# 87 "FunPar.fsy"
                 : Absyn.expr));
|]
# 645 "FunPar.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    engine lexer lexbuf 0 :?> _
