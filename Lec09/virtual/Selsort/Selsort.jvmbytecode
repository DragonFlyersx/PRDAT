  public static void SelectionSort(int[]);
    descriptor: ([I)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=4, args_size=1
      
      	 // 1 = int i
      	 // 2 = int least
      	 // 3 = int j
         
         // i = 0
         0: iconst_0 // Push constant 0 onto stack
         1: istore_1 // Store in local 1 'i'
         
         2: iload_1 // Load local variable 1 'i'
         3: aload_0 // Load argument 'arr'
         4: arraylength // get array length 
         5: if_icmpge 57 // if i >= arr.length, then jump to line 57  (Conditianal jump to line 57)
         
         // continue if i < arr.length
         8: iload_1 // load local variable 1 'i'
         9: istore_2 // Store local variable 'least'
         
        // j = i + 1
        10: iload_1 // load local variable 1 'i' 
        11: iconst_1 // push constant 1
        12: iadd  // i + 1 Arihmetic operation
        13: istore_3 // store local variable j
        
        // j < arr.Length
        14: iload_3 // Load local variable j
        15: aload_0 // Argument load 'arr'
        16: arraylength // get array length
        17: if_icmpge     37 // if j >= arr.Length jump to line 37
        
        // if (arr[j] < arr[least])
        20: aload_0 // load argument 'arr'
        21: iload_3 // Load local variable j
        22: iaload // Load arr element
        23: aload_0 // Load argument 'arr'
        24: iload_2 // Load local variable least
        25: iaload // load array element
        26: if_icmpge     31 // if compare  arr[j] >= arr[least] jump to line 31
        
        // least = j
        29: iload_3 // load local variable 'j'
        30: istore_2 // store 'least'
        
        // jump back in loop 2
        31: iinc 3, 1 // Increment j++
        34: goto 14 // jump to line 14
        
        // int tmp = arr[i];
        37: aload_0 // load 'arr' onto stack
        38: iload_1 // load 'i' onto stack
        39: iaload // load 'arr[i]' onto stack
        40: istore_3 // store the value from 'arr[i]' into 'tmp'
        
        // arr[i] = arr[least];
        41: aload_0 // load argument 0 'arr'
        42: iload_1 // load local variable 1 'i'
        43: aload_0 // load argument 0 'arr'
        44: iload_2 // load local variable 'least'
        45: iaload  // load array element 'arr[least]'
        46: iastore // store 'arr[least]' in 'arr[i]'
        
        // arr[least] = j;
        47: aload_0 // load argument 0 'arr'
        48: iload_2 // load local variable 2 'least'
        49: iload_3 // load local variable 3 'j'
        50: iastore // store 'j' in 'arr[least]'
        
        // i + 1
        51: iinc 1, 1 // increment 'i' + 1
        
        // jump to loop 1
        54: goto          2 // jump to line 2
        
        57: return // return
        
      LineNumberTable:
        line 21: 0
        line 22: 8
        line 23: 10
        line 24: 20
        line 25: 29
        line 23: 31
        line 26: 37
        line 21: 51
        line 28: 57
      StackMapTable: number_of_entries = 5
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 253 /* append */
          offset_delta = 11
          locals = [ int, int ]
        frame_type = 16 /* same */
        frame_type = 250 /* chop */
          offset_delta = 5
        frame_type = 249 /* chop */
          offset_delta = 19